import asyncio
import queue
import time
from concurrent.futures.thread import ThreadPoolExecutor


class AudioProcessor:

    def __init__(self, request_queue, response_queue) -> None:
        self.request_queue = request_queue
        self.response_queue = response_queue
        self.executor = ThreadPoolExecutor(max_workers=4)

    def _handle_audio(self, message: dict) -> None:
        text: str = message.pop("audio").decode().upper()
        message["text"] = text
        time.sleep(5)
        self.response_queue.put(message)

    async def _listen_request_queue(self):
        print("üêá –û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç—Å—è")
        while True:
            try:
                message = await asyncio.to_thread(self.request_queue.get_nowait)
            except queue.Empty:
                continue
            print(f"‚û° –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ request_queue: {message}")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            await asyncio.get_event_loop().run_in_executor(self.executor, self._handle_audio, message)

    async def start(self) -> None:
        print("üîß –ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω.")
        await self._listen_request_queue()
